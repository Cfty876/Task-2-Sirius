# comprehensive_test.py
import requests
import json
import time
from datetime import datetime, timedelta

BASE_URL = "http://localhost:8000"


class BookingSystemTester:
    def __init__(self):
        self.base_url = BASE_URL
        self.admin_token = None
        self.user_token = None
        self.test_data = {}

    def print_section(self, title):
        print(f"\n{'=' * 60}")
        print(f"üîç {title}")
        print(f"{'=' * 60}")

    def print_result(self, test_name, success, details=""):
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status}: {test_name}")
        if details:
            print(f"   üìù {details}")

    def setup_tokens(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.print_section("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")

        # –õ–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∞
        admin_login = {
            "email": "admin@example.com",
            "password": "admin123"
        }
        response = requests.post(f"{self.base_url}/auth/login", json=admin_login)
        if response.status_code == 200:
            self.admin_token = response.json()["access_token"]
            self.print_result("Admin login", True, f"Token: {self.admin_token[:50]}...")
        else:
            self.print_result("Admin login", False, f"Status: {response.status_code}")
            return False

        # –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_login = {
            "email": "user@example.com",
            "password": "user123"
        }
        response = requests.post(f"{self.base_url}/auth/login", json=user_login)
        if response.status_code == 200:
            self.user_token = response.json()["access_token"]
            self.print_result("User login", True, f"Token: {self.user_token[:50]}...")
        else:
            self.print_result("User login", False, f"Status: {response.status_code}")

        return True

    def get_headers(self, token):
        return {"Authorization": f"Bearer {token}"}

    def test_swagger_docs(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        self.print_section("Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")

        response = requests.get(f"{self.base_url}/docs")
        success = response.status_code == 200
        self.print_result("Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω", success, f"Status: {response.status_code}")

        response = requests.get(f"{self.base_url}/redoc")
        success = response.status_code == 200
        self.print_result("ReDoc –¥–æ—Å—Ç—É–ø–µ–Ω", success, f"Status: {response.status_code}")

        return True

    def test_auth_security(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        self.print_section("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")

        # –¢–µ—Å—Ç —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
        # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤, —Ç–∞–∫ –∫–∞–∫ FastAPI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Ö –æ–±—Ä–µ–∑–∞–µ—Ç
        test_cases = [
            {"name": "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", "header": f"Bearer {self.user_token}", "expected": 200},
            {"name": "–ë–µ–∑ Bearer", "header": self.user_token, "expected": 401},
            {"name": "Bearer –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ", "header": f"bearer {self.user_token}", "expected": 401},
            {"name": "–¢–æ–∫–µ–Ω —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤–Ω—É—Ç—Ä–∏", "header": f"Bearer {self.user_token} extra", "expected": 401},
            {"name": "–ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω", "header": "Bearer ", "expected": 401},
            {"name": "–¢–æ–ª—å–∫–æ Bearer", "header": "Bearer", "expected": 401},
        ]

        all_passed = True
        for test_case in test_cases:
            headers = {"Authorization": test_case["header"]}
            try:
                response = requests.get(f"{self.base_url}/auth/me", headers=headers)
                success = response.status_code == test_case["expected"]
                if not success:
                    all_passed = False
                self.print_result(f"–§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: {test_case['name']}", success,
                                  f"Expected: {test_case['expected']}, Got: {response.status_code}")
            except Exception as e:
                self.print_result(f"–§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: {test_case['name']}", False, f"Error: {e}")
                all_passed = False

        return all_passed

    def test_user_registration_login(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.print_section("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = {
            "email": f"test_{int(time.time())}@example.com",
            "username": f"testuser_{int(time.time())}",
            "password": "testpassword123",
            "role": "user"
        }

        response = requests.post(f"{self.base_url}/auth/register", json=new_user)
        success = response.status_code == 200
        self.print_result("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", success,
                          f"Status: {response.status_code}")

        if success:
            # –õ–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            login_data = {
                "email": new_user["email"],
                "password": new_user["password"]
            }
            response = requests.post(f"{self.base_url}/auth/login", json=login_data)
            success = response.status_code == 200
            self.print_result("–õ–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", success,
                              f"Status: {response.status_code}")

            if success:
                self.test_data["new_user_token"] = response.json()["access_token"]

        return success

    def test_hotel_crud_operations(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–µ–ª–µ–π"""
        self.print_section("CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–µ–ª–µ–π")

        headers = self.get_headers(self.admin_token)

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–µ–ª—è
        new_hotel = {
            "name": "Test Hotel CRUD",
            "city": "Test City",
            "address": "Test Address 123",
            "stars": 4,
            "description": "Test hotel for CRUD operations"
        }

        response = requests.post(f"{self.base_url}/hotels/", json=new_hotel, headers=headers)
        success = response.status_code == 200
        self.print_result("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–µ–ª—è", success, f"Status: {response.status_code}")

        if not success:
            return False

        hotel_id = response.json()["data"]["id"]
        self.test_data["hotel_id"] = hotel_id

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–µ–ª—è
        response = requests.get(f"{self.base_url}/hotels/", headers=headers)
        success = response.status_code == 200 and len(response.json()["data"]) > 0
        self.print_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π", success,
                          f"Found: {len(response.json()['data'])} hotels")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–µ–ª—è
        updated_hotel = new_hotel.copy()
        updated_hotel["name"] = "Updated Test Hotel"
        response = requests.put(f"{self.base_url}/hotels/{hotel_id}", json=updated_hotel, headers=headers)
        success = response.status_code == 200
        self.print_result("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–µ–ª—è", success, f"Status: {response.status_code}")

        # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–µ–ª—è
        response = requests.delete(f"{self.base_url}/hotels/{hotel_id}", headers=headers)
        success = response.status_code == 200
        self.print_result("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–µ–ª—è", success, f"Status: {response.status_code}")

        return True

    def test_room_crud_operations(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤"""
        self.print_section("CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤")

        headers = self.get_headers(self.admin_token)

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –æ—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
        hotel_data = {
            "name": "Test Hotel for Rooms",
            "city": "Room Test City",
            "address": "Room Test Address",
            "stars": 3,
            "description": "Hotel for room testing"
        }

        response = requests.post(f"{self.base_url}/hotels/", json=hotel_data, headers=headers)
        if response.status_code != 200:
            self.print_result("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞ –∫–æ–º–Ω–∞—Ç", False)
            return False

        hotel_id = response.json()["data"]["id"]

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        new_room = {
            "hotel_id": hotel_id,
            "room_number": "TEST101",
            "room_type": "standard",
            "price_per_night": 100.0,
            "capacity": 2,
            "room_count": 1,
            "features": "Test features"
        }

        response = requests.post(f"{self.base_url}/hotels/rooms", json=new_room, headers=headers)
        success = response.status_code == 200
        self.print_result("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã", success, f"Status: {response.status_code}")

        if not success:
            return False

        room_id = response.json()["data"]["id"]
        self.test_data["room_id"] = room_id

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
        response = requests.get(f"{self.base_url}/hotels/rooms", headers=headers)
        success = response.status_code == 200 and len(response.json()["data"]) > 0
        self.print_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç", success,
                          f"Found: {len(response.json()['data'])} rooms")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        updated_room = new_room.copy()
        updated_room["price_per_night"] = 120.0
        response = requests.put(f"{self.base_url}/hotels/rooms/{room_id}", json=updated_room, headers=headers)
        success = response.status_code == 200
        self.print_result("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã", success, f"Status: {response.status_code}")

        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏ –æ—Ç–µ–ª—è
        response = requests.delete(f"{self.base_url}/hotels/rooms/{room_id}", headers=headers)
        success = response.status_code == 200
        self.print_result("–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã", success, f"Status: {response.status_code}")

        response = requests.delete(f"{self.base_url}/hotels/{hotel_id}", headers=headers)

        return True

    def test_hotel_filtering_sorting(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ—Ç–µ–ª–µ–π"""
        self.print_section("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–µ–ª–µ–π")

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É
        response = requests.get(f"{self.base_url}/hotels/?city=Moscow")
        success = response.status_code == 200
        moscow_hotels = len(response.json()["data"])
        self.print_result("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–µ–ª–µ–π –ø–æ –≥–æ—Ä–æ–¥—É", success,
                          f"Found {moscow_hotels} hotels in Moscow")

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∑–≤–µ–∑–¥–∞–º
        response = requests.get(f"{self.base_url}/hotels/?stars=5")
        success = response.status_code == 200
        five_star_hotels = len(response.json()["data"])
        self.print_result("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–µ–ª–µ–π –ø–æ –∑–≤–µ–∑–¥–∞–º", success,
                          f"Found {five_star_hotels} 5-star hotels")

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–≤–µ–∑–¥–∞–º
        response = requests.get(f"{self.base_url}/hotels/?sort_by_stars=true")
        success = response.status_code == 200
        if success and len(response.json()["data"]) > 1:
            hotels = response.json()["data"]
            sorted_by_stars = all(hotels[i]["stars"] >= hotels[i + 1]["stars"]
                                  for i in range(len(hotels) - 1))
            self.print_result("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–µ–ª–µ–π –ø–æ –∑–≤–µ–∑–¥–∞–º", sorted_by_stars)
        else:
            self.print_result("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–µ–ª–µ–π –ø–æ –∑–≤–µ–∑–¥–∞–º", False)

        return True

    def test_room_filtering_sorting(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–æ–º–µ—Ä–æ–≤"""
        self.print_section("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–æ–≤")

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∫–æ–º–Ω–∞—Ç—ã
        response = requests.get(f"{self.base_url}/hotels/rooms?room_type=premium")
        success = response.status_code == 200
        premium_rooms = len(response.json()["data"])
        self.print_result("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ –ø–æ —Ç–∏–ø—É", success,
                          f"Found {premium_rooms} premium rooms")

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ
        response = requests.get(f"{self.base_url}/hotels/rooms?min_price=50&max_price=150")
        success = response.status_code == 200
        price_filtered_rooms = len(response.json()["data"])
        self.print_result("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ", success,
                          f"Found {price_filtered_rooms} rooms in price range")

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ
        response = requests.get(f"{self.base_url}/hotels/rooms?sort_by_price=true")
        success = response.status_code == 200
        if success and len(response.json()["data"]) > 1:
            rooms = response.json()["data"]
            sorted_by_price = all(rooms[i]["price_per_night"] <= rooms[i + 1]["price_per_night"]
                                  for i in range(len(rooms) - 1))
            self.print_result("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ", sorted_by_price)
        else:
            self.print_result("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ", False)

        return True

    def test_room_availability_methods(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤"""
        self.print_section("–î–≤–∞ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤")

        # –ú–µ—Ç–æ–¥ 1: –ü–æ –¥–∞—Ç–∞–º –∑–∞–µ–∑–¥–∞/–≤—ã–µ–∑–¥–∞
        check_in = (datetime.now() + timedelta(days=5)).strftime("%Y-%m-%d")
        check_out = (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d")

        response = requests.get(
            f"{self.base_url}/bookings/rooms/available-by-dates?"
            f"check_in={check_in}&check_out={check_out}"
        )
        success = response.status_code == 200
        available_by_dates = len(response.json()["data"])
        self.print_result("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ –¥–∞—Ç–∞–º", success,
                          f"Found {available_by_dates} available rooms")

        # –ú–µ—Ç–æ–¥ 2: –ü–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        start_date = (datetime.now() + timedelta(days=10)).strftime("%Y-%m-%d")
        duration_days = 3

        response = requests.get(
            f"{self.base_url}/bookings/rooms/available-by-duration?"
            f"start_date={start_date}&duration_days={duration_days}"
        )
        success = response.status_code == 200
        available_by_duration = len(response.json()["data"])
        self.print_result("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", success,
                          f"Found {available_by_duration} available rooms")

        return success

    def test_hotel_booking_workflow(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª—è"""
        self.print_section("Workflow –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª—è")

        headers = self.get_headers(self.user_token)

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        check_in = (datetime.now() + timedelta(days=3)).strftime("%Y-%m-%d")
        check_out = (datetime.now() + timedelta(days=5)).strftime("%Y-%m-%d")

        response = requests.get(
            f"{self.base_url}/bookings/rooms/available-by-dates?"
            f"check_in={check_in}&check_out={check_out}"
        )

        if response.status_code != 200 or len(response.json()["data"]) == 0:
            self.print_result("–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç", False, "No available rooms found")
            return False

        available_room = response.json()["data"][0]

        # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        booking_data = {
            "room_id": available_room["id"],
            "check_in_date": check_in,
            "check_out_date": check_out,
            "guest_count": 2
        }

        response = requests.post(
            f"{self.base_url}/bookings/hotel",
            json=booking_data,
            headers=headers
        )
        success = response.status_code == 200
        self.print_result("–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª—è", success,
                          f"Status: {response.status_code}")

        if not success:
            return False

        booking_id = response.json()["data"]["id"]
        self.test_data["hotel_booking_id"] = booking_id

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = requests.get(f"{self.base_url}/bookings/hotel", headers=headers)
        success = response.status_code == 200
        user_bookings = len(response.json()["data"])
        self.print_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", success,
                          f"Found {user_bookings} bookings")

        # –ê–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        admin_headers = self.get_headers(self.admin_token)
        response = requests.get(f"{self.base_url}/bookings/hotel", headers=admin_headers)
        success = response.status_code == 200
        all_bookings = len(response.json()["data"])
        self.print_result("–ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", success,
                          f"Found {all_bookings} total bookings")

        # –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
        response = requests.delete(
            f"{self.base_url}/bookings/hotel/{booking_id}",
            headers=admin_headers
        )
        success = response.status_code == 200
        self.print_result("–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º", success,
                          f"Status: {response.status_code}")

        return success

    def test_flight_search_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–æ–≤"""
        self.print_section("–ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤")

        # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤
        departure_date = (datetime.now() + timedelta(days=5)).strftime("%Y-%m-%d")

        response = requests.get(
            f"{self.base_url}/flights/search?"
            f"departure_city=Moscow&arrival_city=Sochi&"
            f"departure_date={departure_date}&passenger_count=2"
        )
        success = response.status_code == 200
        direct_routes = len(response.json()["data"])
        self.print_result("–ü–æ–∏—Å–∫ –ø—Ä—è–º—ã—Ö —Ä–µ–π—Å–æ–≤", success,
                          f"Found {direct_routes} route options")

        # –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
        response = requests.get(
            f"{self.base_url}/flights/search?"
            f"departure_city=Moscow&arrival_city=Sochi&"
            f"departure_date={departure_date}&passenger_count=2&via_city=St. Petersburg"
        )
        success = response.status_code == 200
        via_routes = len(response.json()["data"])
        self.print_result("–ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ —á–µ—Ä–µ–∑ –≥–æ—Ä–æ–¥", success,
                          f"Found {via_routes} routes via St. Petersburg")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–º–µ—Ç–æ–∫ "—Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π" –∏ "—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π"
        if direct_routes > 0:
            routes = response.json()["data"]
            has_cheapest = any(route.get("is_cheapest", False) for route in routes)
            has_fastest = any(route.get("is_fastest", False) for route in routes)

            self.print_result("–ü–æ–º–µ—Ç–∫–∞ '—Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π'", has_cheapest)
            self.print_result("–ü–æ–º–µ—Ç–∫–∞ '—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π'", has_fastest)

        return success

    def test_flight_booking_workflow(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤"""
        self.print_section("Workflow –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤")

        headers = self.get_headers(self.user_token)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–π—Å–æ–≤
        response = requests.get(f"{self.base_url}/flights/")
        if response.status_code != 200 or len(response.json()["data"]) == 0:
            self.print_result("–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–π—Å–æ–≤", False, "No flights found")
            return False

        available_flight = response.json()["data"][0]

        # –ë—Ä–æ–Ω–∏—Ä—É–µ–º —Ä–µ–π—Å
        booking_data = {
            "flight_id": available_flight["id"],
            "passenger_count": 1
        }

        response = requests.post(
            f"{self.base_url}/bookings/flight",
            json=booking_data,
            headers=headers
        )
        success = response.status_code == 200
        self.print_result("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç–∞", success,
                          f"Status: {response.status_code}")

        if success:
            booking_ref = response.json()["data"]["booking_reference"]
            self.print_result("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏", True, f"Reference: {booking_ref}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        response = requests.get(f"{self.base_url}/bookings/flight", headers=headers)
        success = response.status_code == 200
        flight_bookings = len(response.json()["data"])
        self.print_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤", success,
                          f"Found {flight_bookings} flight bookings")

        return success

    def test_flight_sorting(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–µ–π—Å–æ–≤"""
        self.print_section("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–π—Å–æ–≤")

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ
        response = requests.get(f"{self.base_url}/flights/?sort_by_price=true")
        success = response.status_code == 200

        if success and len(response.json()["data"]) > 1:
            flights = response.json()["data"]
            sorted_by_price = all(flights[i]["price"] <= flights[i + 1]["price"]
                                  for i in range(len(flights) - 1))
            self.print_result("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–π—Å–æ–≤ –ø–æ —Ü–µ–Ω–µ", sorted_by_price)
        else:
            self.print_result("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–π—Å–æ–≤ –ø–æ —Ü–µ–Ω–µ", False)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥–∞–º
        response = requests.get(
            f"{self.base_url}/flights/?departure_city=Moscow&arrival_city=Sochi"
        )
        success = response.status_code == 200
        filtered_flights = len(response.json()["data"])
        self.print_result("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–π—Å–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º", success,
                          f"Found {filtered_flights} Moscow-Sochi flights")

        return True

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¢–ó")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        requirements = [
            ("Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", self.test_swagger_docs),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", self.setup_tokens),
            ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", self.test_auth_security),
            ("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", self.test_user_registration_login),
            ("CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–µ–ª–µ–π", self.test_hotel_crud_operations),
            ("CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤", self.test_room_crud_operations),
            ("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–µ–ª–µ–π", self.test_hotel_filtering_sorting),
            ("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤", self.test_room_filtering_sorting),
            ("–î–≤–∞ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏", self.test_room_availability_methods),
            ("Workflow –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª—è", self.test_hotel_booking_workflow),
            ("–ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤", self.test_flight_search_functionality),
            ("Workflow –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤", self.test_flight_booking_workflow),
            ("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–π—Å–æ–≤", self.test_flight_sorting),
        ]

        results = []
        for req_name, test_func in requirements:
            try:
                result = test_func()
                results.append((req_name, result))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {req_name}: {e}")
                results.append((req_name, False))

        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
        self.print_section("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")

        passed = sum(1 for _, result in results if result)
        total = len(results)

        print(f"üìä –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
        print(f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed / total * 100:.1f}%")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¢–ó
        critical_requirements = [
            "Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–µ–ª–µ–π",
            "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–µ–ª–µ–π", "–î–≤–∞ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏",
            "Workflow –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª—è", "–ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤"
        ]

        critical_passed = all(any(req in name and result for name, result in results)
                              for req in critical_requirements)

        print(f"\nüéØ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {'‚úÖ –í–´–ü–û–õ–ù–ï–ù–´' if critical_passed else '‚ùå –ù–ï –í–´–ü–û–õ–ù–ï–ù–´'}")

        if critical_passed and passed / total >= 0.8:
            print("\nüéâ –í–´–í–û–î: –°–∏—Å—Ç–µ–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢–ó!")
            print("   ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é")
            print("   ‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –≤—Å–µ–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏")
            print("   ‚úÖ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
            print("   ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–µ–ª–µ–π –∏ –Ω–æ–º–µ—Ä–æ–≤")
            print("   ‚úÖ –î–≤–∞ –º–µ—Ç–æ–¥–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤")
            print("   ‚úÖ –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π")
            print("   ‚úÖ –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥")
            print("   ‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–º–µ—Ç–∫–∏ –¥–ª—è –±–∏–ª–µ—Ç–æ–≤")
        else:
            print("\n‚ö†Ô∏è –í–´–í–û–î: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã")

        return critical_passed and passed / total >= 0.8


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python main.py")
            exit(1)
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python main.py")
        exit(1)

    tester = BookingSystemTester()
    success = tester.run_comprehensive_test()

    if success:
        print(f"\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {BASE_URL}/docs")
        print(f"‚ù§Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {BASE_URL}/health")
    else:
        print(f"\nüí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        exit(1)